/*eslint-env mocha*/
/*eslint-disable strict, no-console*/

var assert = require('assert');

describe('params and return', function(){
  var nbs = require('../index'), wait = nbs.wait, waitF = nbs.waitF, resume = nbs.resume;

  beforeEach(function(){
    nbs.resetConfig();
  });
  
  it('`waitF` should return the resume param(single)', function(done){
    nbs.run(function(){
      setTimeout(function(){
        resume(1);
      }, 0);
      var ret = waitF();
      assert.equal(ret, 1);
      done();
    }, done);
  });

  it('`waitF` should return the resume param(multiple)', function(done){
    nbs.run(function(){
      setTimeout(function(){
        resume(1,2);
      }, 0);
      var ret = waitF();
      assert.equal(ret[0], 1);
      assert.equal(ret[1], 2);
      done();
    }, done);
  });


  it('`wait` should return the resume param(single)', function(done){
    nbs.run(function(){
      setTimeout(function(){
        resume(1);
      }, 0);
      var ret = wait();
      assert.equal(ret, null);
      done();
    }, done);
  });

  it('`wait` should return the resume params(multiple)', function(done){
    nbs.run(function(){
      setTimeout(function(){
        resume(null, 1,2,'a');
      }, 0);
      var ret = wait();
      assert.equal(ret[0], 1);
      assert.equal(ret[1], 2);
      assert.equal(ret[2], 'a');
      done();
    }, done);
  });
  it('`wait` should return the resume params(arguments)', function(done){
    nbs.run(function(){
      setTimeout(function(){
        (function(){
          resume.apply(null, arguments);
        })(null, 1, 2, 'a');
      }, 0);
      var ret = wait();
      assert.equal(ret[0], 1);
      assert.equal(ret[1], 2);
      assert.equal(ret[2], 'a');
      done();
    }, done);
  });

  it('`wait` should return the resume of node-style(arguments)', function(done){
    nbs.run(function(){
      setTimeout(function(){
        (function(){
          resume.apply(null, arguments);
        })(null, 1);
      }, 0);
      var ret = wait();
      assert.equal(ret, 1);
      done();
    }, done);
  });


  it('`resume` should return the next wait param(single)', function(done){
    nbs.run(function(){
      setTimeout(function(){
        var ret = resume();
        assert.equal(ret, 1);
      }, 0);
      wait();
      setTimeout(function(){
        resume();
      });
      wait(1);
      done();
    }, done);
  });
  it('`resume` should should return the next wait params(multiple)', function(done){
    nbs.run(function(){
      setTimeout(function(){
        var ret = resume();
        assert.equal(ret[0], 1);
        assert.equal(ret[1], 2);
        assert.equal(ret[2], 'a');
      }, 0);
      wait();
      setTimeout(function(){
        resume();
      });
      wait(1,2,'a');
      done();
    }, done);
  });

  it('the last `resume` should return the run method\'s return', function(done){
    nbs.run(function(){
      setTimeout(function(){
        var ret = resume();
        assert.equal(ret, 1);
      }, 0);
      wait();

      setTimeout(function(){
        var ret = resume();
        assert.equal(ret, 2);
      }, 0);
      wait(1);

      return 2;
    }, done);
    setTimeout(function(){
      done();
    }, 100);
  });


});