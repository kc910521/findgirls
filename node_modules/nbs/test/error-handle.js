/*eslint-env mocha*/
/*eslint-disable strict, no-console*/

var assert = require('assert');

describe('error handle', function(){
  var nbs = require('../index'), wait = nbs.wait, resume = nbs.resume;

  beforeEach(function(){
    nbs.resetConfig();
  });
  
  
  it('should throw the resume error param(first) from wait', function(done){
    nbs.run(function(){
      setTimeout(function(){
        resume(new Error('async function error'));
      }, 0);
      assert.throws(function(){
        wait();
      });
      done();
    }, done);
  });

  it('should not throw the resume error param(not first) from wait', function(done){
    nbs.run(function(){
      setTimeout(function(){
        resume('hah', new Error('async function error'));
      }, 0);
      var ret = wait();
      assert(ret instanceof Error);

      done();
    }, done);
  });

  it('should throw the resume error param(first in arguments) from wait', function(done){
    nbs.run(function(){
      setTimeout(function(){
        (function(){
          resume.apply(null, arguments);
        })(new Error('async function error'));
      }, 0);
      assert.throws(function(){
        wait();
      });
      done();
    }, done);
  });

  it('should not throw the resume error param(not first in arguments) from wait', function(done){
    nbs.run(function(){
      setTimeout(function(){
        (function(){
          resume.apply(null, arguments);
        })(null, new Error('async function error'));
      }, 0);
      var ret = wait();
      assert(ret instanceof Error);
      done();
    }, done);
  });

  it('should catch the error thrown before resume', function(done){
    nbs.run(function(){
      setTimeout(function(){
        (function(){
          throw new Error('error before resume');
        })();
        resume();
      }, 0);
      wait();
    }, function(err){
      assert.equal(err.message, 'error before resume');
      done();
    });
  });


  it('should catch the error throw with the default handler', function(done){
    nbs.resetConfig();

    //remove mocha's listener
    var lsns = process.listeners('uncaughtException');
    process.removeAllListeners('uncaughtException');

    process.on('uncaughtException', function(err){
      assert.equal(err.message, 'error before resume');

      //restore mocha's listener
      process.removeAllListeners('uncaughtException');
      lsns.forEach(function(lsn){
        process.on('uncaughtException', lsn);
      });

      done();
    });

    nbs.run(function(){
      throw new Error('error before resume');
    });
  });

  it('should catch the error thrown when handle the error', function(done){
    //remove mocha's listener
    var lsns = process.listeners('uncaughtException');
    process.removeAllListeners('uncaughtException');
    process.on('uncaughtException', function(err){
      assert.equal(err.message, 'error in domain error listener');

      //restore mocha's listener
      process.removeAllListeners('uncaughtException');
      lsns.forEach(function(lsn){
        process.on('uncaughtException', lsn);
      });

      done();
    });

    nbs.run(function(){
      throw new Error('error before resume');
    }, function(err){
      throw new Error('error in domain error listener');
    });
  });


  it('should catch the subsequent error with the main error handler', function(done){
    var count = 1;
    nbs.run(function(){
      setTimeout(function(){
        throw new Error('error 2');
      }, 0);
      throw new Error('error 1');
    }, function(err){
      if(count++===1){
        assert.equal(err.message, 'error 1');
      }else{
        assert.equal(err.message, 'error 2');
        done();
      }
    });
  });


  it('should catch the subsequent error with the config error handler', function(done){
    nbs.config({onSubError: function(err){
      assert.equal(err.message, 'error 2');
      done();
    }});
    nbs.run(function(){
      setTimeout(function(){
        throw new Error('error 2');
      }, 0);
      throw new Error('error 1');
    }, function(err){
      assert.equal(err.message, 'error 1');
    });
  });

  it('should catch the subsequent error with the custom error handler', function(done){
    nbs.run(function(){
      setTimeout(function(){
        throw new Error('error 2');
      }, 0);
      throw new Error('error 1');
    }, function(err){
      assert.equal(err.message, 'error 1');
    }, function(err){
      assert.equal(err.message, 'error 2');
      done();
    });
  });


  it('should catch the error thrown in async cb before resume and end the fiber stack', function(done){
    nbs.run(function(){
      setTimeout(function(){
        setTimeout(function(){
          resume(null, 1);
        });
        throw new Error('error before resume');
      }, 0);
      wait();
      done(); //will never be called
      console.log('after wait');
    }, function(err){
      assert.equal(err.message, 'error before resume');
      done();
    }, function(err){
      assert.equal(err.message, null);
    });
  });


});