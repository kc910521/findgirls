/*eslint-env mocha*/
/*eslint-disable strict, no-console*/

var assert = require('assert');

describe('with express', function(){
  var nbs = require('../index'), wait = nbs.wait, resume = nbs.resume;

  beforeEach(function(){
    nbs.resetConfig();
  });
  
  it('should run with normal processing and default error handling', function(done){
    this.timeout(15000);

    var app = (require('express'))();
    var server = require('http').createServer(app);

    app.use(nbs.express());
    app.get('/test', function(req, resp){
      setTimeout(function(){
        resume(null, 'hello');
      }, 100);
      resp.send(wait()).end();
    });
    app.get('/error', function(req, resp){
      setTimeout(function(){
        (function(){
          throw new Error('gun');
        })();
      }, 100);
      var ret = wait();
      resp.send(ret).end();
    });
    app.get('/suberror', function(req, resp){
      setTimeout(function(){
        (function(){
          throw new Error('async sub error');
        })();
      }, 10);
      setTimeout(function(){
        throw new Error('first error');
      }, 0);
    });
    app.use(function(err, req, resp, next){
      // if(err.isFiberTerm) return;
      resp.send(err.message).end();
    });

    server.listen(8088, function(){
      var request = require('request');

      var pending = 3;
      function got(){
        if(!--pending) done();
      }

      request('http://127.0.0.1:8088/test', function(err, resp, body){
        assert.equal(body, 'hello');
        got();
      });

      request('http://127.0.0.1:8088/error', function(err, resp, body){
        assert.equal(body, 'gun');
        got();
      });

      request('http://127.0.0.1:8088/suberror', function(err, resp, body){
        assert.equal(body, 'first error');
        setTimeout(got, 10);
      });

    });
  });

  it('should run with custom error handling', function(done){
    this.timeout(15000);

    var app = (require('express'))();
    var server = require('http').createServer(app);

    app.use(nbs.express({
      onError: function(err, req, resp){
        resp.send('fiber '+err.message).end();
      }
    }));
    app.get('/error', function(req, resp){
      setTimeout(function(){
        (function(){
          throw new Error('gun');
        })();
      }, 100);
      var ret = wait();
      resp.send(ret).end();
    });

    server.listen(8087, function(){
      var request = require('request');

      request('http://127.0.0.1:8087/error', function(err, resp, body){
        assert.equal(body, 'fiber gun');
        done();
      });
    });
  });
  
  it('should run with custom subsequent error handling', function(done){
    this.timeout(15000);
    var pending = 2;
    function got(){
      if(!--pending) done();
    }

    var app = (require('express'))();
    var server = require('http').createServer(app);

    app.use(nbs.express({
      onError: function(err, req, resp){
        resp.send('fiber '+err.message).end();
      },
      onSubError: function(err){
        assert.equal(err.message, 'gun 2');
        got();
      },
    }));
    app.get('/error', function(req, resp){
      setTimeout(function(){
        throw new Error('gun 2');
      }, 10);
      setTimeout(function(){
        throw new Error('gun');
      });
      wait();
    });

    server.listen(8085, function(){
      var request = require('request');

      request('http://127.0.0.1:8085/error', function(err, resp, body){
        assert.equal(body, 'fiber gun');
        got();
      });
    });
  });


});