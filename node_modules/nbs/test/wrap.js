/*eslint-env mocha*/
/*eslint-disable strict, no-console, no-func-assign*/

var assert = require('assert');
var _ = require('underscore');

describe('wrap basic', function(){
  var nbs = require('../index'), wait = nbs.wait, resume = nbs.resume;

  beforeEach(function(){
    nbs.resetConfig();
  });

  it('can wrap the node-style async funtion', function(done){
    function doAsync(cb){
      setTimeout(function(){
        cb(null, 'doAsyncReturn');
      }, 5);
    }
    function doAsyncWithError(cb){
      setTimeout(function(){
        cb(new Error('doAsyncError'));
      }, 5);
    }
    doAsync = nbs.wrap(doAsync);
    doAsyncWithError = nbs.wrap(doAsyncWithError);
    nbs.run(function(){
      assert.equal(doAsync(), 'doAsyncReturn');
      assert.throws(function(){
        doAsyncWithError();
      });
      done();
    }, done);
  });

  it('can wrap the node-style object', function(done){
    var lib = {
      doAsync : function (cb){
        setTimeout(function(){
          cb(null, 'doAsyncReturn');
        }, 5);
      },
      doAsyncWithError: function (cb){
        setTimeout(function(){
          cb(new Error('doAsyncError'));
        }, 5);
      }
    };
    lib = nbs.wrap(lib);
    nbs.run(function(){
      assert.equal(lib.doAsync(), 'doAsyncReturn');
      assert.throws(function(){
        lib.doAsyncWithError();
      });
      done();
    }, done);
  });


  it('can wrap the node-style function without deep', function(done){
    var doAsync = function (cb){
      setTimeout(function(){
        cb(null, 'doAsyncReturn');
      }, 5);
    };
    doAsync.doAsync2 = function (cb){
      setTimeout(function(){
        cb(null, 'doAsync2Return');
      }, 5);
    };
    doAsync = nbs.wrap(doAsync);
    nbs.run(function(){
      assert.equal(doAsync(), 'doAsyncReturn');
      assert.throws(function(){
        doAsync.doAsync2(function(err, data){
          resume(err, data);
        });
        wait();
      });
      
      done();
    }, done);
  });


  it('can wrap the node-style function with deep', function(done){
    var doAsync = function (cb){
      setTimeout(function(){
        cb(null, 'doAsyncReturn');
      }, 5);
    };
    doAsync.doAsync2 = function (cb){
      setTimeout(function(){
        cb(null, 'doAsync2Return');
      }, 5);
    };
    doAsync = nbs.wrap(doAsync, true);
    nbs.run(function(){
      assert.equal(doAsync(), 'doAsyncReturn');
      assert.equal(doAsync.doAsync2(), 'doAsync2Return');
      
      done();
    }, done);
  });
  
  it('can wrap the fs.readFile funtion', function(done){
    var fs = require('fs');
    fs.writeFileSync('./wrap-file', 'function wrap');

    var readFile = nbs.wrap(fs.readFile);
    nbs.run(function(){
      assert.equal(readFile('./wrap-file'), 'function wrap');
      assert.throws(function(){
        fs.readFile();
      });
      done();
    }, done);
  });

  it('can wrap the node-style object with some functions', function(done){
    var fs = require('fs');
    fs.writeFileSync('./wrap-file', 'obj wrap');

    var nfs = nbs.wrap(_.pick(fs, 'readFile'));
    nbs.run(function(){
      assert.equal(nfs.readFile('./wrap-file'), 'obj wrap');
      assert.throws(function(){
        nfs.readFile();
      });
      done();
    }, done);
  });


  it('can wrap the node-style object', function(done){
    var fs = require('fs');
    fs.writeFileSync('./wrap-file', 'obj wrap all');

    fs = _.extend(fs, nbs.wrap(_.pick(fs, 'readFile')));
    nbs.run(function(){
      assert.equal(fs.readFile('./wrap-file'), 'obj wrap all');
      assert.throws(function(){
        fs.readFile();
      });
      assert.equal(fs.readFileSync('./wrap-file'), 'obj wrap all');
      done();
    }, done);
  });

  after(function(){
    var fs = require('fs');
    fs.unlinkSync('./wrap-file');
  });

});